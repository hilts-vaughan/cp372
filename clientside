



//Imports are listed in full to show what's being used
//could just import javax.swing.* and java.awt.* etc.. 
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.concurrent.Semaphore;
import java.util.List;
/**
 * This is the basic Java GUI interface for the QATTP sample client. Most of the
 * GUI logic is held within here.
 * 
 * @author Vaughan Hilts, Brandon Smith
 *
 */
public class ShapeGetter {
	// Note: Typically the main method will be in a
	// separate class. As this is a simple one class
	// example it's all in the one class.
	private final Semaphore request = new Semaphore(1);

	static Socket shapeConnectionSocket = null;
	static PrintStream os = null;
	static DataInputStream is = null;

	final String ENDLINE = "\r\n";
//(initilized the text fields and areas were going to need
	final JTextArea getText = new JTextArea(1, 20);
	final JTextField ipText = new JTextField(20);
	final JTextField portText = new JTextField(7);
	final JTextArea shapeText = new JTextArea(1, 20);

	@SuppressWarnings("rawtypes")
//Make our GUI list for displaying the retreived values
	private final JList displayList;
	//Make a list to store what will go in the GUI list
	private final ArrayList<Shape> _shapes = new ArrayList<Shape>();
	//Make an text for information on clicked list elements 
	private final JTextArea _infoArea = new JTextArea();
//Set up the 4 buttons we need
	JButton connect = new JButton("Connect");
	JButton disconnect = new JButton("Disconnect");
	JButton getBut = new JButton("GET");
	JButton postBut = new JButton("POST");
//Spawn two threads dont think these were needed
//	Thread send = new sendThread();
	//Thread get = new getThread();

	public static void main(String[] args) {
		new ShapeGetter();
	}

	public ShapeGetter() {

		this.displayList = new JList<Shape>();
		// this._shapes.
		JScrollPane listScrollPane = new JScrollPane(displayList,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		//make the main frame for the program
		JFrame guiFrame = new JFrame();
		// make sure the program exits when the frame closes
		guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		guiFrame.setTitle("QATTP Client");
		guiFrame.setSize(400, 700);
		getText.setTabSize(2);
		shapeText.setTabSize(2);
		JScrollPane getScrollPane = new JScrollPane(getText,
				JScrollPane.VERTICAL_SCROLLBAR_NEVER,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		getText.setLineWrap(false);
		//These scroll panes are to get the textares to scroll accross with you.
		//bars are turned off as they get in the way
		JScrollPane shapeScrollPane = new JScrollPane(shapeText,
				JScrollPane.VERTICAL_SCROLLBAR_NEVER,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		shapeText.setLineWrap(false);
		//just some lables for the port and host names
		JLabel ipLbl = new JLabel("Host:");
		JLabel portLbl = new JLabel("Port:");
		//set up the frame
		guiFrame.setLayout(new GridLayout(0, 1));
		//start making panels and filling them for formatting
		final JPanel ipPanel = new JPanel();
		ipPanel.add(ipLbl);
		ipPanel.add(ipText);
		guiFrame.add(ipPanel);
		final JPanel portPanel = new JPanel();
		portPanel.add(portLbl);
		portPanel.add(portText);
		portPanel.add(connect);
		portPanel.add(disconnect);
		final JPanel buttonPanel = new JPanel();
		buttonPanel.add(portPanel);

		final JPanel getPanel = new JPanel();

		getPanel.add(getBut);
		getPanel.add(getScrollPane);
		//start filling up the gui
		guiFrame.add(buttonPanel);
		guiFrame.add(getPanel);
		final JPanel userInputPanel = new JPanel();
		userInputPanel.add(postBut);
		userInputPanel.add(shapeScrollPane);
		//add a panel
		guiFrame.add(userInputPanel);
		//format the info area
		this._infoArea.setText("Please select a shape.");
		this._infoArea.setEditable(false);
		this._infoArea.setColumns(5);
		this._infoArea.setBackground(Color.BLACK);
		this._infoArea.setForeground(Color.WHITE);
		this._infoArea.setFont(new Font("monospaced", Font.PLAIN, 12));
		this._infoArea.setLineWrap(true);
		//put it in the gui
		guiFrame.add(this._infoArea);

		//put in the last piece of the gui
		guiFrame.add(listScrollPane);
		//show the gui to the user
		guiFrame.setVisible(true);

		// for saving some time
		ipText.setText("localhost");
		//portText.setText("5555");
		//and now the listeners
		
		this.displayList.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				int index = displayList.getSelectedIndex();
				if (index > -1) {
					updateInformation(_shapes.get(index));
				}
			}
		});

		connect.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {

				try {
					openConnection(ipText, portText);
				} catch (Exception e) {
					displayError("The connection to the server was refused. Are your settings correct?");
				}
			}

		});

		disconnect.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {

				try {//error handling is also done within the function
					closeConnection();
				} catch (Exception e) {
					displayError("The connection could not be closed");
				}
			}

		});

		getBut.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				//this is for error handling
				if (os != null) {
					// if(!os.checkError()){
					Thread get = new getThread();
					get.start();
					// }
					// else{
					// System.out.println("there was a problem with sending");
					// }
				} else {
					displayError("Please connect before attempting to use the client.");
				}

			}

		});
		postBut.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				//this is for error handling
				if (os != null) {
					// if(!os.checkError()){
					Thread send = new sendThread();
					send.start();
					// }else{
					// System.out.println("there was a problem with sending");
					// }

				} else {
					displayError("Please connect before attempting to use the client.");
				}
			}
		});

	}

	/**
	 * Given a shape, the information area is updated to reflect the information
	 * of the shape.
	 * 
	 * @param shape
	 *            The shape information to update the info area with.
	 */
	void updateInformation(Shape shape) {
		if (shape == null) {
			this._infoArea.setText("");
		} else {
			this._infoArea.setText(shape.getInfo());
		}
	}

	/**
	 * Given a reason, informs the user of an error that has occurred.
	 * 
	 * @param reason
	 *            The reason for the error.
	 */
	private void displayError(String reason) {
		JOptionPane.showMessageDialog(null, reason, "Error",
				JOptionPane.ERROR_MESSAGE);
	}

	/**
	 * Given a message, informs the user of some information.
	 * 
	 * @param message
	 *            The message to inform the user of.
	 */
	private void displayInfo(String message) {
		JOptionPane.showMessageDialog(null, message, "Information",
				JOptionPane.INFORMATION_MESSAGE);
	}

	
	
	/**
	 * Opens a connection to the server using the input values provided by the form.
	 * 
	 * @param ipText2
	 * @param portText2
	 * @throws NumberFormatException
	 * @throws UnknownHostException
	 * @throws IOException
	 */
	void openConnection(JTextField ipText2, JTextField portText2)
			throws NumberFormatException, UnknownHostException, IOException {
		if (shapeConnectionSocket == null) {
			shapeConnectionSocket = new Socket(ipText2.getText(),
					Integer.parseInt(portText2.getText()));
			os = new PrintStream(shapeConnectionSocket.getOutputStream());
			is = new DataInputStream(shapeConnectionSocket.getInputStream());
			displayInfo("Connection to the server has been established.");
		} else {
			displayError("You already Have a connection \nPlease disconnect first.");
		}
	}

	/**
	 * Forcibly terminates a connection provided by the server.
	 * 
	 * @throws NumberFormatException
	 * @throws UnknownHostException
	 * @throws IOException
	 */
	void closeConnection() throws NumberFormatException, UnknownHostException,
			IOException {
		if (shapeConnectionSocket != null) {
			shapeConnectionSocket.close();
			os.close();
			is.close();
			shapeConnectionSocket = null;
			is = null;
			os = null;
			displayInfo("Connection to the server has been terminated.");
		} else {
			displayError("There is currently no connection.");

		}

	}

	/**
	 * A thread designed to be used to send data in a non-blocking fashion.
	 * 
	 * @author Vaughan Hilts, Brandon Smith
	 *
	 */
	public class sendThread extends Thread {

		public void run() {
			try {
				request.acquire();
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
			}
			os.print("POST " + shapeText.getText() + ENDLINE);
			String response = null;
			try {
				response = is.readUTF();

				if (response.indexOf("200") > -1) {
					String type = response.substring(response.indexOf("Type:") + "Type:".length());
					type = type.trim().equals("Q") ? "Quadrilateral" : "Triangle";	
					displayInfo("POST was  a success. Server database updated. \n Shape Type: " + type);
				} else {
					this.doBadRequest(response);
				}

			}

			catch (IOException e) {

				// clean up if forced
				shapeConnectionSocket = null;
				is = null;
				os = null;
			}

			request.release();

		}

		private void doBadRequest(String response) {
			final String searchFor = "Reason:";

			int index = response.indexOf(searchFor);
			String reason = response.substring(index + searchFor.length() + 1)
					.trim();

			displayError("Bad Request: " + reason);
		}

	}

	/**
	 * A thread designed to get data in a non-blocking fashion.
	 * 
	 * @author Vaughan Hilts, Brandon Smith
	 *
	 */
	public class getThread extends Thread {

		public void run() {
			try {
				request.acquire();
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			os.print("GET " + getText.getText() + ENDLINE);
			String response = null;
			try {

				response = is.readUTF();

				// Check out the response
				System.out.println(response);

				// Seek ahead to the data
				if (response.indexOf("400") > -1) {
					doBadRequest(response);
				} else if (response.indexOf("200") > -1) {
					doGET(response);
				} else {
					doOther(response);
				}

			} catch (IOException e) {

				// Clean up if we're forced to

				shapeConnectionSocket = null;
				is = null;
				os = null;

			}
			request.release();
		}

		private void doOther(String response) {
			displayError("The server return an unknown response. Is your client up to date?");
		}

		private void doBadRequest(String response) {
			final String searchFor = "Reason:";

			int index = response.indexOf(searchFor);
			String reason = response.substring(index + searchFor.length() + 1)
					.trim();

			displayError("Bad Request: " + reason);
		}

		private void doGET(String response) {
			response = response.substring(response.indexOf("OK") + 2);

			// Extract out the various different parts
			String[] parts = response.split("&");

			_shapes.clear();
			for (String part : parts) {
				Shape shape = new Shape(part);
				_shapes.add(shape);
			}

			// We need to delegate or we'll be in trouble with cross thread
			// violations
			SwingUtilities.invokeLater(new Runnable() {
				@SuppressWarnings("unchecked")
				@Override
				public void run() {
					displayList.setListData(_shapes.toArray());
					updateInformation(null);
				}
			});
		}
	}

}
/**
 * A basic shape representation that client uses to keep track
 * of the various data the server has sent down.
 * 
 * @author Vaughan Hilts, Brandon Smith
 *
 */
public class Shape {

	String _properties = "";
	private List<Point> _vertices = new ArrayList<Point>();
	int _count;

	// Unpack our string and extract our data string
	public Shape(String packedShapeString) {

		String[] sequences = packedShapeString.split(":");

		String[] pointPieces = sequences[0].split(",");
		if (pointPieces.length > 1) {
			
			// Convert pieces here
			for (int i = 0; i < pointPieces.length; i += 2) {

				String pointPiece = pointPieces[i].trim();
				String pointPiece2 = pointPieces[i + 1].trim();

				int x = Integer.parseInt(pointPiece.trim());
				int y = Integer.parseInt(pointPiece2.trim());

				_vertices.add(new Point(x, y));
			}

			this._properties = sequences[1];
			this._count = Integer.parseInt(sequences[2].replace("\r", "")
					.replace("\n", ""));
		}

	}

	public String toString() {

		String value = "No Values";
		if (getType() != null) {
			value = getType() + " with points " + this._vertices.toString()
					+ "";
			;
		}
		return value;
	}

	private String getType() {
		int vertexCount = this._vertices.size();
		String name = vertexCount == 3 ? "Triangle" : "Quadrilateral";
		if (vertexCount == 0) {
			name = null;
		}
		return name;
	}

	public String getInfo() {
		String info = "Sorry, there is no information available.";

		if (getType() != null) {
			info = "Type: " + getType() + "\n";
			info += "Occurences: " + _count + "\n";
			info += "Properties: " + _properties + "\n";
			info += "Points: " + _vertices;
		}
		return info;
	}

}


/**
 * A basic 2D point that allows the representation of a single vertex in 2D
 * space. Contains simple methods to get the cordinates. This object is
 * immutable.
 * 
 * @author Vaughan Hilts, Brandon Smith
 * 
 */
public class Point {

	private final int x;
	private final int y;

	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public int getX() {
		return x;
	}

	public int getY() {
		return y;
	}

	/**
	 * Returns a string representation of the point for easy viewing.
	 */
	@Override
	public String toString() {
		return ("(" + x + "," + y + ")");
	}

}