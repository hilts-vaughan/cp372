package com.cp372.server.models;

import java.util.List;

public abstract class Shape {
	
	// A list of vertices mapped in memory
	protected List<Point> _vertices;
	
	public Shape(List<Point> vertices) {
		
		// We should sort out list of points before actually doing anything with these
		
		_vertices = vertices;
	}
	
	private List<Point> getSortedClockwiseVertices(List<Point> vertices) {
		
		Point center = getCentroidPoint(vertices);
		double[] weights = new double[vertices.size()];

		for(int i = 0; i < vertices.size(); i++) {
			Point vertex = vertices[i];
			weights[i] = Math.atan2(vertex.getY() - center.getY(), vertex.getX() - center.getX());
		}
		
	}
	
	/**
	 * Computes the centroid of a set of vertices given in the parameters
	 * set. This centroid implementation has a small bias drift
	 * 
	 * See: http://en.wikipedia.org/wiki/Centroid#Of_a_finite_set_of_points
	 * 
	 * @param vertices	The set of vertices to compute the centroid point for
	 * @return
	 */
	private Point getCentroidPoint(Iterable<Point> vertices) {
		
		int x = 0;
		int y = 0;
		int k = 0;
		
		for(Point p : vertices) {
			x += p.getX();
			y += p.getY();
			k++;
		}
		
		x /= k;
		y /= k;
		
		return new Point(x, y);
	}
	
}
